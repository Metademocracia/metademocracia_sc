// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Proposaltype extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Proposaltype entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Proposaltype must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Proposaltype", id.toString(), this);
    }
  }

  static load(id: string): Proposaltype | null {
    return changetype<Proposaltype | null>(store.get("Proposaltype", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get proposal(): Array<string> {
    let value = this.get("proposal");
    return value!.toStringArray();
  }

  set proposal(value: Array<string>) {
    this.set("proposal", Value.fromStringArray(value));
  }
}

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Proposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Proposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Proposal", id.toString(), this);
    }
  }

  static load(id: string): Proposal | null {
    return changetype<Proposal | null>(store.get("Proposal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get proposal_type(): string {
    let value = this.get("proposal_type");
    return value!.toString();
  }

  set proposal_type(value: string) {
    this.set("proposal_type", Value.fromString(value));
  }

  get proponent(): string {
    let value = this.get("proponent");
    return value!.toString();
  }

  set proponent(value: string) {
    this.set("proponent", Value.fromString(value));
  }

  get target(): string | null {
    let value = this.get("target");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set target(value: string | null) {
    if (!value) {
      this.unset("target");
    } else {
      this.set("target", Value.fromString(<string>value));
    }
  }

  get time_to_complete(): i32 {
    let value = this.get("time_to_complete");
    return value!.toI32();
  }

  set time_to_complete(value: i32) {
    this.set("time_to_complete", Value.fromI32(value));
  }

  get Claims_available(): BigInt {
    let value = this.get("Claims_available");
    return value!.toBigInt();
  }

  set Claims_available(value: BigInt) {
    this.set("Claims_available", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get upvote(): i32 {
    let value = this.get("upvote");
    return value!.toI32();
  }

  set upvote(value: i32) {
    this.set("upvote", Value.fromI32(value));
  }

  get downvote(): i32 {
    let value = this.get("downvote");
    return value!.toI32();
  }

  set downvote(value: i32) {
    this.set("downvote", Value.fromI32(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get approval_date(): string | null {
    let value = this.get("approval_date");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set approval_date(value: string | null) {
    if (!value) {
      this.unset("approval_date");
    } else {
      this.set("approval_date", Value.fromString(<string>value));
    }
  }

  get creation_date(): string {
    let value = this.get("creation_date");
    return value!.toString();
  }

  set creation_date(value: string) {
    this.set("creation_date", Value.fromString(value));
  }

  get user_creation(): string {
    let value = this.get("user_creation");
    return value!.toString();
  }

  set user_creation(value: string) {
    this.set("user_creation", Value.fromString(value));
  }

  get link(): string {
    let value = this.get("link");
    return value!.toString();
  }

  set link(value: string) {
    this.set("link", Value.fromString(value));
  }
}
